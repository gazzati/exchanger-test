{"version":3,"sources":["UnitOfTable.jsx","MainTable.jsx","App.js","serviceWorker.js","index.js"],"names":["UnitOfTable","values","rates","preRates","toFixed","rate","preRate","rel","subtractionRates","MainTable","currency","useState","date","setRates","setPreRates","prePreRates","setPrePreRates","pastMode","setPastMode","pastModeChanger","changeFormatTime","value","changeDate","newDate","Date","setDate","getDate","getFullYear","getMonth","changeDateToTable","useEffect","getRates","a","fetch","response","json","answer","console","log","then","Tabs","defaultActiveKey","id","Tab","eventKey","title","className","getHours","getMinutes","Button","variant","onClick","Table","striped","bordered","Object","keys","map","el","App","showButton","setShowButton","showTab","setShowTab","preValue","setPreValue","setValue","Nav","onSelect","selectedKey","Item","Link","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43ddaf99.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction UnitOfTable({values, rates, preRates}) {\n    const subtractionRates = (rate, preRate) => {\n        const rel = rate / preRate * 100;\n        if (rel < 100) {\n            return `-${(100 - rel).toFixed(3)}%`\n        } else if (rel > 100) return `+${(rel - 100).toFixed(3)}%`\n        else return 'Without changes'\n    }\n    return (\n        <tr>\n            <td>{values}</td>\n            <td>{rates.toFixed(3)}</td>\n            <td>{subtractionRates(rates, preRates)}</td>\n        </tr>\n    );\n}\n\nexport default UnitOfTable;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, Tab, Table, Tabs} from \"react-bootstrap\";\nimport UnitOfTable from \"./UnitOfTable\";\n\n\nfunction MainTable({currency}) {\n    const [rates, setRates] = useState({rates: {}, date: null})\n    const [preRates, setPreRates] = useState({rates: {}})\n    const [prePreRates, setPrePreRates] = useState({rates: {}})\n    const [pastMode, setPastMode] = useState(false)\n\n    const pastModeChanger = () => {\n        setPastMode(!pastMode)\n    }\n\n    const changeFormatTime = (value) => {\n        if (value < 10) {\n            return `0${value}`\n        } else return value\n    }\n\n    const changeDate = (date) => {\n        const newDate = new Date(date)\n        newDate.setDate(newDate.getDate() - 1)\n        return `${newDate.getFullYear()}-${newDate.getMonth() + 1}-${newDate.getDate()}`\n    }\n\n    const changeDateToTable = (date) => {\n        const newDate = new Date(date)\n        return `${changeFormatTime(newDate.getDate())}-${changeFormatTime(newDate.getMonth() + 1)}-${newDate.getFullYear()}`\n    }\n\n    useEffect(() => {\n        const getRates = async (setRates, date = 'latest') => {\n            try {\n                let response = await fetch(`https://api.exchangeratesapi.io/${date}?base=${currency}`)\n                let answer = await response.json();\n                setRates({\n                    ...answer,\n                    date: changeDateToTable(answer.date)\n                });\n                console.log(answer.date)\n                return answer.date\n            } catch (error) {\n                console.log(error)\n            }\n        }\n\n        getRates(setRates)\n            .then(response => getRates(setPreRates, changeDate(response))\n                .then(response => getRates(setPrePreRates, changeDate(response))))\n\n    }, [currency])\n    return (\n        <Tabs defaultActiveKey=\"rates\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"rates\" title=\"Exchange rates\">\n                <div className=\"WrapperContent\">\n                    <div className=\"Description\">\n                        <span>Base currency: <b>{currency}</b></span>\n                        <span className=\"margin-left\">Request date: <b>{`${changeDateToTable(new Date())}`}</b></span>\n                        <span className=\"margin-left\">Request time: <b>{`${changeFormatTime(\n                            (new Date().getHours()))}:${changeFormatTime(new Date().getMinutes())}`}</b></span>\n                        {!pastMode\n                            ? <Button variant=\"primary\"\n                                      className=\"margin-left\"\n                                      onClick={pastModeChanger}>{preRates.date} rates</Button>\n                            : <Button className=\"margin-left\"\n                                      variant=\"primary\"\n                                      onClick={pastModeChanger}>{rates.date} rates</Button>}\n                    </div>\n                    <Table className=\"MainTable\" striped bordered>\n                        <thead>\n                        <tr>\n                            <th>Currency</th>\n                            <th>Rates on {!pastMode ? rates.date : preRates.date}</th>\n                            <th>In comparison with {!pastMode ? preRates.date : prePreRates.date}</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {rates && Object.keys(rates.rates)\n                            .map(el => (el != currency) && <UnitOfTable values={el}\n                                                                        rates={pastMode ? preRates.rates[el] : rates.rates[el]}\n                                                                        preRates={pastMode ? prePreRates.rates[el] : preRates.rates[el]}/>)\n                        }\n                        </tbody>\n                    </Table>\n                </div>\n            </Tab>\n            {/* <Tab eventKey=\"topFive\" title=\"Top 5 biggest changes\">\n        </Tab>*/}\n        </Tabs>\n    );\n}\n\nexport default MainTable;\n","import React, {useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, Nav} from \"react-bootstrap\";\nimport MainTable from \"./MainTable\";\n\nfunction App() {\n    const [showButton, setShowButton] = useState(false);\n    const [showTab, setShowTab] = useState(false);\n    const [preValue, setPreValue] = useState(null)\n    const [value, setValue] = useState(null)\n\n\n    const onSelectNav = (selectedKey) => {\n        setPreValue(selectedKey);\n        setShowButton(true);\n    }\n\n    const onGetRatesClick = () => {\n        setShowTab(true);\n        setValue(preValue)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"SelectValue\">\n                <Nav className=\"Selector\" variant=\"pills\"\n                     onSelect={onSelectNav}>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"USD\">USD</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"EUR\">EUR</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"RUB\">RUB</Nav.Link>\n                    </Nav.Item>\n                </Nav>\n                {showButton &&\n                <Button className=\"GetButton\" onClick={onGetRatesClick}>Get rates</Button>}\n            </div>\n            <div className=\"WrapperContent\">\n                {showTab && <MainTable currency={value} />}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}